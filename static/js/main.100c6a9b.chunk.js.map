{"version":3,"sources":["components/Header.js","components/MapMenu.js","components/PlaceMenu.js","components/MapboxGLMap.js","App.js","serviceWorker.js","index.js"],"names":["styles","height","width","padding","textAlign","fontSize","Header","style","menuStyle","position","background","zIndex","display","backgroundLayers","id","name","MapMenu","props","map","backgroundLayer","key","type","value","onClick","setbackgroundLayerID","defaultChecked","backgroundLayerID","placesLayers","center","LocationMenu","placesLayer","setPlacesLayerID","placesLayerID","MapboxGLMap","useState","setMap","PlacesLayerID","mapContainer","useRef","useEffect","mapboxgl","accessToken","process","Map","container","current","zoom","on","resize","initializeMap","setStyle","setCenter","ref","el","overflow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.100c6a9b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst styles = {\r\n    height: '60px',\r\n    width: '100vw',\r\n    padding: '10px',\r\n    textAlign: 'center',\r\n    fontSize: '30px',\r\n  };\r\n\r\nconst Header = () => {\r\n    return (\r\n        <div style={styles}>\r\n            <header>KART?</header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import React from 'react'\r\n\r\nconst menuStyle = {\r\n    position: \"absolute\",\r\n    background: \"white\",\r\n    padding: 10,\r\n    zIndex: \"1\",\r\n    display: \"flex\",\r\n};\r\n\r\nconst backgroundLayers = [\r\n    { id: \"streets-v11\", name: \"Streets\" },\r\n    { id: \"light-v10\", name: \"Light\" },\r\n    { id: \"dark-v10\", name: \"Dark\" },\r\n    { id: \"satellite-v9\", name: \"Satellite\" },\r\n];\r\n\r\nconst MapMenu = (props) => {\r\n    return (\r\n        <div style={menuStyle}>\r\n            {backgroundLayers.map((backgroundLayer) => (\r\n                <div key={backgroundLayer.id}>\r\n                    <input\r\n                        id={backgroundLayer.id}\r\n                        type=\"radio\"\r\n                        name=\"rtoggle\"\r\n                        value={backgroundLayer.id}\r\n                        onClick={() => props.setbackgroundLayerID(backgroundLayer.id)}\r\n                        defaultChecked={backgroundLayer.id === props.backgroundLayerID}\r\n                    />\r\n                    <label>{backgroundLayer.name}</label>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default MapMenu  ","import React from 'react'\r\n\r\nconst menuStyle = {\r\n    position: \"absolute\",\r\n    background: \"white\",\r\n    padding: 10,\r\n    zIndex: \"2\",\r\n    display: \"flex\",\r\n};\r\n\r\nconst placesLayers = [\r\n    { center: [10.408773, 63.422091], name: \"LOL\" },\r\n    { center: [10.408773, 63.422091], name: \"TOO\" },\r\n    { center: [10.408773, 63.422091], name: \"Da\" },\r\n    { center: [10.408773, 63.422091], name: \"Satee\" },\r\n];\r\n\r\nconst LocationMenu = (props) => {\r\n    return (\r\n        <div style={menuStyle}>\r\n            {placesLayers.map((placesLayer) => (\r\n                <div key={placesLayer.id}>\r\n                    <input\r\n                        id={placesLayer.id}\r\n                        type=\"radio\"\r\n                        name=\"rtoggle\"\r\n                        value={placesLayer.id}\r\n                        onClick={() => props.setPlacesLayerID(placesLayer.id)}\r\n                        defaultChecked={placesLayer.id === props.placesLayerID}\r\n                    />\r\n                    <label>{placesLayer.name}</label>\r\n                </div>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default LocationMenu  ","import React, { useEffect, useRef, useState } from \"react\";\r\nimport mapboxgl from \"mapbox-gl\";\r\nimport \"mapbox-gl/dist/mapbox-gl.css\";\r\nimport MapMenu from \"./MapMenu\";\r\nimport LocationMenu from \"./PlaceMenu\";\r\n\r\nconst styles = {\r\n  width: \"100%\",\r\n  height: \"calc(100vh - 80px)\",\r\n  position: \"absolute\",\r\n};\r\n\r\nconst MapboxGLMap = () => {\r\n  const [map, setMap] = useState(null);\r\n  const [backgroundLayerID, setbackgroundLayerID] = useState(\"streets-v11\");\r\n  const [PlacesLayerID, setPlacesLayerID] = useState([10.408773, 63.422091]);\r\n  const mapContainer = useRef(null);\r\n\r\n  useEffect(() => {\r\n    mapboxgl.accessToken = process.env.REACT_APP_MAPBOX_KEY;\r\n    const initializeMap = ({ setMap, mapContainer }) => {\r\n      const map = new mapboxgl.Map({\r\n        container: mapContainer.current,\r\n        style: `mapbox://styles/mapbox/${backgroundLayerID}`,\r\n        center: PlacesLayerID,\r\n        zoom: 10,\r\n      });\r\n\r\n      map.on(\"load\", () => {\r\n        setMap(map);\r\n        map.resize();\r\n      });\r\n    };\r\n\r\n    if (!map) initializeMap({ setMap, mapContainer });\r\n    if (map) map.setStyle(\"mapbox://styles/mapbox/\" + backgroundLayerID);\r\n    if (map) map.setCenter(PlacesLayerID);\r\n  }, [backgroundLayerID, PlacesLayerID, map]);\r\n\r\n  return (\r\n    <div>\r\n      <LocationMenu setPlacesLayerID={setPlacesLayerID} PlacesLayerID={PlacesLayerID}/>\r\n      <MapMenu setbackgroundLayerID={setbackgroundLayerID} backgroundLayerID={backgroundLayerID}/>\r\n      <div ref={(el) => (mapContainer.current = el)} style={styles} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapboxGLMap;","import React from \"react\";\r\nimport Header from \"./components/Header\";\r\nimport MapboxGLMap from \"./components/MapboxGLMap\";\r\n\r\nconst styles = {\r\n  overflow:'hidden'\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div style={styles}>\r\n      <Header/>\r\n      <MapboxGLMap />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}